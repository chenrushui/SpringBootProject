<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yunque.www.springbootdemo.mapper.DoctorHospitalMapper">


    <resultMap id="BaseResultMap" type="DoctorHospital">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="doctor_id" property="doctorId" jdbcType="BIGINT"/>
        <result column="hospital_id" property="hospitalId" jdbcType="BIGINT"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="sys_code" property="sysCode" jdbcType="INTEGER"/>
        <result column="memo" property="memo" jdbcType="VARCHAR"/>
        <result column="delete_flag" property="deleteFlag" jdbcType="INTEGER"/>
        <result column="created_id" property="createdId" jdbcType="BIGINT"/>
        <result column="created_time" property="createdTime" jdbcType="TIMESTAMP"/>
        <result column="modified_id" property="modifiedId" jdbcType="BIGINT"/>
        <result column="modified_time" property="modifiedTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, doctor_id, hospital_id, status, sys_code, memo, delete_flag, created_id, created_time, 
    modified_id, modified_time
  </sql>


    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from doctor_hospital
        where id = #{id,jdbcType=BIGINT}
    </select>

    <!--通过机构id获取机构人员信息-->
    <select id="selectMemberNumByHospitalId" parameterType="java.lang.Long" resultType="java.lang.Integer">
    select count(1) from p_doctor where delete_flag=1 and hospital_id=#{hospitalId}
  </select>

    <!--TODO:如何进行数组的遍历-->
    <!--通过机构ids获取多个机构人员信息-->
    <select id="selectMemberNumByHospitalIds" parameterType="java.util.List" resultType="java.util.Map">
        select hospital_id as hospitalId, count(1) as num
        from p_doctor
        where hospital_id in (<foreach collection="list" item="item" index="index" separator=",">#{item}</foreach>)
        and delete_flag=1
        group by hospital_id
    </select>

    <!--获取某一个机构的科室人数-->
    <select id="selectMemberNumByHospitalIdAndDepartmentId" parameterType="java.lang.Long"
            resultType="java.lang.Integer">
    select count(1)
    from p_doctor
    where hospital_id=#{hospitalId} and department_id=#{departmentId} AND delete_flag=1
  </select>

    <!--查看有人员的科室id以及对应的人数-->
    <!--todo：结果进行了自动映射,别名和对象的属性一致特别好用-->
    <select id="getDepartmentMemberByHospitalId"
            resultType="com.yunque.www.springbootdemo.pojo.HospitalDepartmentMemberDto">
        select t.department_id as departmentId,count(1) as memberNum
        from (
        select case
        when department_id is null then 0
        else department_id end as department_id
        from p_doctor
        where hospital_id=#{hospitalId} and delete_flag=1
        <if test="doctorIds!=null and doctorIds.size>0">
            and id in
            <foreach collection="list" item="item" index="index" separator=",">#{item}</foreach>
        </if>
        ) t
    </select>

    <insert id="insert" parameterType="DoctorHospital">
    insert into doctor_hospital (id, doctor_id, hospital_id, 
      status, sys_code, memo, 
      delete_flag, created_id, created_time, 
      modified_id, modified_time)
    values (#{id,jdbcType=BIGINT}, #{doctorId,jdbcType=BIGINT}, #{hospitalId,jdbcType=BIGINT}, 
      #{status,jdbcType=INTEGER}, #{sysCode,jdbcType=INTEGER}, #{memo,jdbcType=VARCHAR}, 
      #{deleteFlag,jdbcType=INTEGER}, #{createdId,jdbcType=BIGINT}, #{createdTime,jdbcType=TIMESTAMP}, 
      #{modifiedId,jdbcType=BIGINT}, #{modifiedTime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="DoctorHospital">
        insert into doctor_hospital
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="doctorId != null">
                doctor_id,
            </if>
            <if test="hospitalId != null">
                hospital_id,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="sysCode != null">
                sys_code,
            </if>
            <if test="memo != null">
                memo,
            </if>
            <if test="deleteFlag != null">
                delete_flag,
            </if>
            <if test="createdId != null">
                created_id,
            </if>
            <if test="createdTime != null">
                created_time,
            </if>
            <if test="modifiedId != null">
                modified_id,
            </if>
            <if test="modifiedTime != null">
                modified_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="doctorId != null">
                #{doctorId,jdbcType=BIGINT},
            </if>
            <if test="hospitalId != null">
                #{hospitalId,jdbcType=BIGINT},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="sysCode != null">
                #{sysCode,jdbcType=INTEGER},
            </if>
            <if test="memo != null">
                #{memo,jdbcType=VARCHAR},
            </if>
            <if test="deleteFlag != null">
                #{deleteFlag,jdbcType=INTEGER},
            </if>
            <if test="createdId != null">
                #{createdId,jdbcType=BIGINT},
            </if>
            <if test="createdTime != null">
                #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifiedId != null">
                #{modifiedId,jdbcType=BIGINT},
            </if>
            <if test="modifiedTime != null">
                #{modifiedTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="DoctorHospital">
        update doctor_hospital
        <set>
            <if test="doctorId != null">
                doctor_id = #{doctorId,jdbcType=BIGINT},
            </if>
            <if test="hospitalId != null">
                hospital_id = #{hospitalId,jdbcType=BIGINT},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="sysCode != null">
                sys_code = #{sysCode,jdbcType=INTEGER},
            </if>
            <if test="memo != null">
                memo = #{memo,jdbcType=VARCHAR},
            </if>
            <if test="deleteFlag != null">
                delete_flag = #{deleteFlag,jdbcType=INTEGER},
            </if>
            <if test="createdId != null">
                created_id = #{createdId,jdbcType=BIGINT},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifiedId != null">
                modified_id = #{modifiedId,jdbcType=BIGINT},
            </if>
            <if test="modifiedTime != null">
                modified_time = #{modifiedTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="DoctorHospital">
    update doctor_hospital
    set doctor_id = #{doctorId,jdbcType=BIGINT},
      hospital_id = #{hospitalId,jdbcType=BIGINT},
      status = #{status,jdbcType=INTEGER},
      sys_code = #{sysCode,jdbcType=INTEGER},
      memo = #{memo,jdbcType=VARCHAR},
      delete_flag = #{deleteFlag,jdbcType=INTEGER},
      created_id = #{createdId,jdbcType=BIGINT},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      modified_id = #{modifiedId,jdbcType=BIGINT},
      modified_time = #{modifiedTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>